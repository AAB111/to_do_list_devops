"""init_db

Revision ID: af836102f55f
Revises: 
Create Date: 2024-06-10 22:45:58.239493

"""

from typing import Sequence, Union

import sqlalchemy as sa
from alembic import op
from config import settings

# revision identifiers, used by Alembic.
revision: str = "af836102f55f"
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.execute(f"CREATE SCHEMA IF NOT EXISTS {settings.DB_SCHEMA}")
    op.create_table(
        "task",
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(length=100), nullable=False),
        sa.Column("target_date", sa.DateTime(), nullable=False),
        sa.Column("is_completed", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{settings.DB_SCHEMA}",
    )
    op.create_table(
        "user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(length=320), nullable=False),
        sa.Column("hashed_password", sa.String(length=1024), nullable=False),
        sa.Column("role", sa.String(length=100), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("is_verified", sa.Boolean(), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("email"),
        schema=f"{settings.DB_SCHEMA}",
    )
    op.create_table(
        "task_user",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("task_id", sa.Integer(), nullable=False),
        sa.Column("user_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["task_id"],
            ["to_do_list.task.id"],
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["to_do_list.user.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema=f"{settings.DB_SCHEMA}",
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("task_user", schema=f"{settings.DB_SCHEMA}")
    op.drop_table("user", schema=f"{settings.DB_SCHEMA}")
    op.drop_table("task", schema=f"{settings.DB_SCHEMA}")
    op.execute(f"DROP SCHEMA IF EXISTS {settings.DB_SCHEMA} CASCADE")
    # ### end Alembic commands ###
